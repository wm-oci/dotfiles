#+TITLE: Emacs Configuration
#+AUTHOR: Walker Malling

* Customize

Tell emacs to put any customization options in a separate file.

#+BEGIN_SRC emacs-lisp
 (setf custom-file "~/.emacs.d/emacs-custom.el")
 (load custom-file t)
#+END_SRC

* Startup

I want my inital buffer to be my agenda. See the Org section for how this block agenda is set up.

#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(setq inhibit-startup-screen t)
;;(setq org-agenda-window-setup 'current-window)
(add-hook 'after-init-hook '(lambda () (org-agenda nil "r"))
           (delete-other-windows)
           (load-theme 'solarized-dark t))

(require 'server)
(unless (server-running-p)
  (server-start))

(defun start-capture (template-key)
   "Start capture with the template assigned to TEMPLATE-KEY"
   (make-frame '((alpha . 90)(height . 30)
                  (top . -1)(left . -10)(autoraise . t)
                  (title . "Capture")(name . "captureframe")))
   (select-frame-by-name "captureframe")
   (org-capture nil template-key)
   (delete-other-windows))

 (defadvice org-capture-finalize (after delete-capture-frame activate)
   "Advise capture-finalize to close the frame if it is the capture frame"
   (if (equal "captureframe" (frame-parameter nil 'name))
        (delete-frame)))

#+END_SRC

#+RESULTS:
: org-capture-finalize
* Backup Directory
I don't want to clutter my filetree with backup files, so store all of them in the same place.
https://www.emacswiki.org/emacs/BackupDirectory

#+begin_src emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.backups-emacs/"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
#+end_src
* Exec Path From Shell

Make various commands usually available in your shell also available to emacs.

https://github.com/purcell/exec-path-from-shell

Explicitly add nix packages.

#+BEGIN_SRC emacs-lisp
(exec-path-from-shell-initialize)
(add-to-list 'exec-path "~/.nix-profile/bin")
#+END_SRC

* Key Binding

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-xg" 'magit-status)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cj" 'org-clock-jump-to-current-clock)
(global-set-key "\C-xt" 'toggle-truncate-lines)
(global-set-key "\C-c%" 'org-mark-ring-push)
(global-set-key "\C-c&" 'org-mark-ring-goto)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
#+END_SRC

* Appearance

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

* Editing

#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)
;; don't use tabs
(setq-default indent-tabs-mode nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(add-hook 'before-save-hook 'whitespace-cleanup)
#+END_SRC

Set indentation in js2 and associage js2-mode with .js and .jsx files
#+BEGIN_SRC emacs-lisp
;; (setq js2-basic-offset 2)
(setq js-indent-level 2)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-mode))
(add-hook 'js2-mode-hook 'flycheck-mode)
(setq flycheck-eslint "~/.emacs.d/.eslintrc")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq typescript-indent-level 2)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))
(add-hook 'typescript-mode-hook 'flycheck-mode)
(setq flycheck-eslint "~/.emacs.d/.eslintrc")
#+END_SRC

Clojure
#+BEGIN_SRC emacs-lisp
;; (add-hook 'clojure-mode-hook #'paredit-mode)
#+END_SRC

Web Mode
#+BEGIN_SRC emacs-lisp
(setq web-mode-markup-indent-offset 2)
(setq web-mode-css-indent-offset 2)
(setq web-mode-code-indent-offset 2)
(setq web-mode-indent-style 2)
(add-to-list 'auto-mode-alist '("\\.hbs\\'" . web-mode))
#+END_SRC

* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
#+END_SRC

* Powerline
#+BEGIN_SRC emacs-lisp
(setf powerline-default-separator 'wave)
(spaceline-spacemacs-theme)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(setq projetile-completion-system 'helm)
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

* Yasnippet

#+begin_src emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
(setq yas-snippet-dirs '("~/.emacs.d/yasnippet"))
#+end_src

* Org

Set org-drill directories to look in any file in my org directory.

#+begin_src emacs-lisp
(defun org-drill-all ()
  (interactive)
  (org-drill
  (directory-files-recursively "~/Dropbox/Org/" "\.org$")))

(require 'cl)
(require 'org-drill)
#+end_src

Set TODO sequence:

#+begin_src emacs-lisp
(setf org-todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "ELECTRIC(e)" "BLOCKED(b)" "LTP(l)" "|" "DONE(d)" "CANCELLED(c)"))
      org-todo-keyword-faces '(("TODO"      . (:foreground "white"))
                               ("NEXT"      . (:foreground "green"))
                               ("BLOCKED"   . (:foreground "red"))
                               ("ELECTRIC"  . (:foreground "blue"    :weight bold :style italic))
                               ("DONE"      . (:foreground "black"  :style ))
                               ("CANCELLED" . (:foreground "black"  :style ))))
#+end_src

Tell org where to look for agenda files.
Set an ispell file.
Configure appearance and clock behavior.

#+BEGIN_SRC emacs-lisp
(setf org-agenda-files '("~/Dropbox/Org/agenda")
      ispell-personal-dictionary "~/Dropbox/Org/dictionary"

      org-startup-indented t
      org-hide-emphasis-markers t
      org-agenda-skip-scheduled-if-deadline-is-shown t
      org-clock-idle-time 10
      org-log-done 'time
      org-clock-persist 'history
      org-list-allow-alphabetical t)
#+end_src

https://orgmode.org/worg/org-tutorials/advanced-searching.html

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(
        ("r" "refile and next"
             ((agenda "")
              (tags "refile"
                    ((org-agenda-overriding-header "Refile")))
              (todo "ELECTRIC"
                    ((org-agenda-overriding-header "ELECTRIC!")))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next")))
              (tags "-refile/!-NEXT-ELECTRIC"
                    ((org-agenda-overriding-header "Other Todo")))
              (tags "LTP"
                    ((org-agenda-overriding-header "Long Term Project")))
))

        ))
#+end_src

#+RESULTS:
| r | refile and next | ((agenda ) (tags-todo refile) (todo NEXT)) |

* Capture templates

Strategy: capture to "inbox" and then refile.

- [n] new item -> inbox
- [f] flashcard -> inbox
- [z] add context to clock

https://orgmode.org/org.html#Template-expansion

| =%^{prompt\vert{}default\vert{}completion1...}= | prompt user for string                                |
| =%^G=                                           | prompt for tags, autocomplete acoss agenda files      |
| =%U=                                            | inactive timestamp                                    |
| =%^t=                                           | prompt for date                                       |
| =%i=                                            | initial context, active region when capture is called |
| =%?=                                            | position of point after completing template           |
| =%a=                                            | annotation (e.g. from =org-store-link=)                 |
| =%f=                                            | file visited by current buffer when capture is called |

Templates:

[[help:org-capture-templates][help: org-capture-templates]]

Templates definitions have the following parameters:

=keys -> description -> type -> target -> template -> [options]=

#+BEGIN_SRC emacs-lisp
;;
(setf org-capture-templates
  '(("n" "New Item"
          entry
          (file+headline "~/Dropbox/Org/agenda/inbox.org" "Refile")
          "* TODO %^{title} %^G:refile:\nCreated: %U \n%?"
          :clock-in t)

    ("c" "Calendar Item"
          entry
          (file+datetree "~/dev/org/agenda/calendar.org")
          "* %^{Title} %^G\n%^t%?")

    ("f" "Flashcard"
          entry
          (file+headline "~/Dropbox/Org/agenda/inbox.org" "Refile")
          "* %^{title} :refile:\n%?\n**Answer\n")

    ("z" "Add Context to Clocked Item"
         item
         (clock)
         "- %a\n- %f"
         :prepend t)
      ))
#+END_SRC

Additional refile options:

#+begin_src emacs-lisp
(setq org-refile-targets '((nil :maxlevel . 9)
                                (org-agenda-files :maxlevel . 9)))
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling
#+end_src
